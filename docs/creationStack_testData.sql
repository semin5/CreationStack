use creationstack;
INSERT INTO users (user_id, role, job_id, subscriber_count, is_active, created_at, updated_at) VALUES
(1, 'CREATOR', 2, 0, TRUE, '2025-07-22 13:48:14', '2025-07-22 13:48:14'),
(2, 'CREATOR', 10, 0, TRUE, '2025-07-22 17:44:39', '2025-07-22 17:44:39'),
(3, 'CREATOR', 3, 0, TRUE, '2025-07-22 17:50:21', '2025-07-22 17:50:21'),
(4, 'USER', NULL, 0, TRUE, '2025-07-22 23:45:44', '2025-07-22 23:45:44');

INSERT INTO user_detail (
  user_id, username, nickname, bio, profile_image_url, platform_id, platform, email, password
) VALUES
(1, '김진아', '스택빌더', '백엔드 개발자입니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/profile-images/72bf02b2-966e-4640-911c-a3f4d1ef666b-apple.jpg', '4359411220', 'KAKAO', 'catapil0505@naver.com', NULL),
(2, '김크리', '디자인고수', '현실적인 실무팁 알려드립니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/profile-images/9315478c-c9a4-4d8e-96a7-f4926c488cb6-l_2017092101002443500222622.jpg', NULL, 'LOCAL', 'creator1@gmail.com', '$2a$12$9Af4slG8mux4D72ofk94MOtAXmAUGkfsBKZ4TWJhUbgWqC8P82HFe'),
(3, '김개발', '풀스택가자', '모든 기술 스택을 가르칩니다', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/profile-images/40e07304-afd2-480c-8b66-663c6fa1dea7-img%20%281%29.png', NULL, 'LOCAL', 'creator2@gmail.com', '$2a$12$Xtcpkm2w.w0d2szjsaBOb..KK9bQ7k72fDLI0zjpvvskVQVY1DnHm');


INSERT INTO content (content_id, creator_id, title, content_text, thumbnail_url, view_count, like_count, comment_count, created_at, updated_at, subscription_type) VALUES
(2, 1, '주니어 개발자를 위한 효과적인 포트폴리오 구성 전략', '# 개발자 포트폴리오, 왜 코드보다 "이것"이 먼저여야 할까?\n \n 요즘 포트폴리오 코칭을 하면서 가장 많이 받는 질문은 “코드를 잘 짜는 게 제일 중요하지 않나요?”라는 말이에요. 맞는 말 같지만, 주니어 개발자에게는 코드의 양이나 복잡성보다 더 중요한 것이 있습니다. 바로 "문제 해결 능력"과 "협업 경험"을 포트폴리오에 효과적으로 담아내는 것이죠. 단순히 잘 동작하는 코드를 보여주는 것을 넘어, 어떤 문제를 어떻게 정의하고 해결했는지, 그리고 팀 프로젝트에서 어떤 역할을 수행했는지를 명확히 보여주는 것이 면접관의 시선을 사로잡는 핵심 전략입니다. 이 글에서는 주니어 개발자가 자신의 강점을 최대한 어필할 수 있는 포트폴리오 구성 전략에 대해 자세히 다룹니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/d3661018-b7dd-4c81-b454-00f548861148-2023_tech_trends_thumbnail.jpg', 41, 0, 0, '2025-07-22 14:22:24', '2025-07-22 17:39:48', 'SUBSCRIBER'),
(3, 1, '개발자 실무 팁 전수', 'ㅇ', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/7a38ca70-faa9-47c5-b5cc-8de6d9c82a6c-img.png', 4, 0, 0, '2025-07-22 16:53:11', '2025-07-22 17:29:07', 'FREE'),
(4, 1, 'UX 디자이너 개발자 협업 팁 3가지', '### 디자인은 예쁘게만 하면 된다고요?\n \n ***\n \n 실무에선 절대 그렇지 않아요. 개발자와 협업할 땐\n \n >  ‘이게 구현 가능한지’, ‘컴포넌트로 나눌 수 있는 구조인지’를 먼저 생각해야 해요. UX 디자이너와 개발자 간의 원활한 협업은 프로젝트 성공의 핵심입니다. 첫째, 디자인 시스템을 구축하여 재사용 가능한 컴포넌트를 정의하고, 둘째, 피그마와 같은 툴에서 개발자 핸드오프 기능을 적극 활용하여 디자인 명세를 명확히 전달해야 합니다. 마지막으로, 정기적인 싱크 미팅을 통해 서로의 진행 상황을 공유하고 발생할 수 있는 문제를 사전에 논의하는 것이 중요합니다. 이 세 가지 팁을 통해 더욱 효율적인 협업을 경험할 수 있을 것입니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/8e3474e9-7737-4dff-87d1-c924e6b40e57-media_1238134b8348909c2171807e2f188e752538aa652.jpeg', 6, 0, 0, '2025-07-22 17:16:31', '2025-07-22 17:28:55', 'SUBSCRIBER'),
(6, 2, '디자인 실무팁 5가지', 'UI/UX 디자인 실무를 시작할 때 가장 중요한 것은 요구사항을 명확히 파악하는 거예요. 클라이언트와의 킥오프 미팅을 통해 기능, 타겟 유저, 시장 조사 등을 미리 정리해두면 이후 수정 작업이 훨씬 줄어들고 프로젝트의 방향성을 잃지 않을 수 있습니다. 두 번째 팁은 사용자 중심 사고를 잊지 않는 것입니다. 아무리 멋진 디자인이라도 사용자가 불편함을 느낀다면 좋은 디자인이라고 할 수 없죠. 세 번째는 끊임없이 피드백을 주고받는 문화입니다. 동료 디자이너나 개발자, 심지어 비전문가에게도 디자인을 보여주고 솔직한 의견을 구하는 것이 중요해요. 네 번째는 트렌드를 주시하되 맹목적으로 따르지 않는 것입니다. 새로운 기술이나 디자인 트렌드는 참고하되, 자신의 프로젝트에 가장 적합한 방식을 찾아 적용해야 합니다. 마지막으로, 문서화와 커뮤니케이션의 중요성을 강조하고 싶습니다. 디자인 결정 과정과 이유를 명확히 문서화하고, 팀원들과 적극적으로 소통하여 오해를 줄이는 것이 성공적인 프로젝트를 위한 필수 요소입니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/bedc8b50-bfe6-4f47-b898-9766baf15a31-l_2017092101002443500222622.jpg', 7, 1, 0, '2025-07-22 17:46:47', '2025-07-23 04:24:37', 'SUBSCRIBER'),
(7, 3, 'AWS 인프라 설계 현실적인 조언', '# 인프라는 단순히 서버를 띄우는 것을 넘어서, 안정성과 확장성, 운영 효율성까지 고려해야 하는 영역입니다. \n \n \n 실무에서는 배포 자동화나 로깅, 모니터링이 기본으로 요구되며, 단순한 인스턴스 구성만으로는 부족합니다. AWS 인프라를 설계할 때는 첫째, 가용성을 최우선으로 고려해야 합니다. 단일 장애 지점(SPOF)을 피하고, 여러 가용 영역(AZ)에 걸쳐 리소스를 분산 배치하는 것이 중요합니다. 둘째, 보안은 설계 단계부터 철저히 적용해야 합니다. 최소 권한 원칙(Least Privilege)을 지키고, VPC, 보안 그룹, IAM 정책 등을 세밀하게 설정해야 합니다. 셋째, 비용 효율성을 고려해야 합니다. 사용하지 않는 리소스는 종료하고, 예약 인스턴스나 스팟 인스턴스를 활용하여 비용을 절감하는 방안을 모색해야 합니다. 마지막으로, 확장성을 염두에 두고 설계해야 합니다. 오토 스케일링 그룹, 로드 밸런서 등을 활용하여 트래픽 증가에 유연하게 대응할 수 있는 구조를 만들어야 합니다. 이러한 요소들을 종합적으로 고려하여 안정적이고 효율적인 AWS 인프라를 구축할 수 있습니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/84ba426b-1f68-4f48-8d34-39bb851c7059-329767-eng.png', 8, 2, 0, '2025-07-22 17:52:54', '2025-07-23 04:24:16', 'FREE'),
(8, 3, 'React.memo와 useCallback 조합법', '리액트를 학습한 이후 실무에서 처음 프로젝트를 접하면 생각보다 복잡한 구조와 다양한 코드 스타일에 놀랄 수 있습니다. 특히 대규모 프로젝트에서는 협업, 성능, 유지보수성을 고려해야 하는데, 이 과정에서 `React.memo`와 `useCallback`은 필수적인 도구입니다. `React.memo`는 컴포넌트의 props가 변경되지 않았다면 리렌더링을 방지하여 성능 최적화를 돕습니다. `useCallback`은 특정 함수를 메모이제이션하여 불필요한 함수 재생성을 막아 자식 컴포넌트의 리렌더링을 방지하는 데 기여합니다. 이 두 훅을 적절히 조합하면 불필요한 렌더링을 최소화하고 애플리케이션의 반응성을 크게 향상시킬 수 있습니다. 하지만 무분별한 사용은 오히려 코드를 복잡하게 만들 수 있으므로, 언제 이들을 사용해야 효과적인지, 그리고 어떤 상황에서 피해야 하는지에 대한 명확한 이해가 필요합니다. 이 글에서는 `React.memo`와 `useCallback`의 올바른 사용법과 함께 실무에서 적용할 수 있는 다양한 예시를 제공합니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/2c2fedea-66d4-4b3d-8beb-d9d7d468369f-react.png', 15, 2, 0, '2025-07-22 18:08:46', '2025-07-23 04:24:03', 'FREE'),
(9, 3, '풀스택 개발자 면접 꿰뚫기', '# 풀스택 개발자 면접은 단순히 기술만 잘한다고 통과할 수 있는 자리가 아닙니다. \n \n \n 백엔드와 프론트엔드를 모두 이해하는 균형 잡힌 사고력, 실제 문제 해결 능력, 그리고 협업을 위한 커뮤니케이션 능력이 종합적으로 평가되는 자리입니다. 면접관들은 지원자가 단순히 여러 기술 스택을 나열하는 것을 넘어, 각 기술이 프로젝트에서 어떤 역할을 하는지, 그리고 기술 간의 상호작용을 어떻게 이해하고 있는지를 파악하고자 합니다. 또한, 특정 문제 상황에 직면했을 때 어떻게 접근하고 해결하는지, 그리고 팀원들과의 소통 과정에서 어떤 역할을 수행하는지를 중요하게 봅니다. 이 글에서는 풀스택 개발자 면접에서 자주 나오는 질문 유형과 이에 대한 효과적인 답변 전략, 그리고 면접 전 준비해야 할 핵심 사항들을 상세히 다룹니다. 백엔드와 프론트엔드 지식을 아우르는 실질적인 팁과 함께, 실제 면접에서 자신감을 가지고 임할 수 있도록 돕는 가이드를 제공합니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/67da2a2f-115c-4c8c-8bb8-f15aa3d81019-1_57FcpLQqGZn8-pXkfwO_1w.png', 10, 2, 0, '2025-07-23 03:56:25', '2025-07-23 04:23:29', 'FREE'),
(12, 3, '막연함을 없애는 기획 실무 팁', '# 기획은 단순히 아이디어를 정리하는 일이 아닙니다. \n \n > 기획자는 팀 안에서 “이게 왜 필요한지”, “어떻게 해야 하는지”, “누가 언제까지 해야 하는지”를 가장 먼저 묻고 끝까지 책임져야 하는 역할입니다. 막연한 아이디어를 구체적인 실행 계획으로 전환하는 기획 실무는 생각보다 복잡하고 체계적인 접근을 요구합니다. 첫째, 문제 정의를 명확히 해야 합니다. 어떤 문제를 해결하고자 하는지, 그 문제가 사용자에게 어떤 영향을 미치는지 구체적으로 파악해야 합니다. 둘째, 목표를 설정할 때는 SMART(Specific, Measurable, Achievable, Relevant, Time-bound) 원칙을 적용하여 측정 가능하고 달성 가능한 목표를 세워야 합니다. 셋째, 사용자 여정(User Journey)을 설계하여 사용자가 서비스를 이용하는 모든 과정을 시각화하고, 각 단계에서 발생할 수 있는 문제점과 개선 기회를 찾아야 합니다. 넷째, 프로토타이핑을 통해 아이디어를 빠르게 검증하고 피드백을 반영하여 완성도를 높여야 합니다. 마지막으로, 기획은 끊임없는 커뮤니케이션의 연속입니다. 개발자, 디자이너, 마케터 등 다양한 팀원들과 긴밀하게 소통하며 기획의 의도를 명확히 전달하고, 이들의 의견을 수렴하여 기획을 발전시켜야 합니다. 이 글에서는 이러한 기획 실무의 핵심 팁들을 상세히 다룹니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/2a53ea9d-a2be-4fb3-ab3e-19e883692b0d-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B8%B0%ED%9A%8D-%EB%8B%A8%EA%B3%84.png', 5, 2, 0, '2025-07-23 04:16:59', '2025-07-23 04:23:12', 'FREE'),
(13, 2, 'UX/UI 실무 트렌드: 핵심 가이드', '#  “예쁘게”보다 “이해되게”가 먼저\n \n 초보 디자이너들이 가장 자주 하는 실수가 시각적으로만 ‘예쁜’ 화면을 만드는 것입니다. 하지만 **사용자는 디자인을 감상하러 온 게 아니라, 문제를 해결하거나 목표를 달성하기 위해 서비스를 이용합니다.** 따라서 UX/UI 디자인의 핵심은 사용자가 쉽고 직관적으로 서비스를 이해하고 사용할 수 있도록 돕는 것입니다. 최근 실무 트렌드는 미니멀리즘, 다크 모드, 접근성 강화, 개인화된 경험 제공 등 다양하지만, 이 모든 것의 근본에는 사용자 경험을 최적화하려는 노력이 깔려 있습니다. 이 글에서는 빠르게 변화하는 UX/UI 디자인 트렌드 속에서 디자이너들이 반드시 알아야 할 핵심 가이드라인을 제시합니다. 사용성 테스트의 중요성, 데이터 기반의 의사 결정, 그리고 지속적인 사용자 피드백 반영을 통해 어떻게 더 나은 사용자 경험을 제공할 수 있는지 구체적인 방법론을 소개합니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/58b7255d-15fb-4507-8cbc-6515a3c5f0f4-StxOp1695087486.jpg', 1, 0, 0, '2025-07-23 04:27:30', '2025-07-23 04:27:32', 'SUBSCRIBER'),
(14, 2, '인터뷰를 통해 쌓아가는 UX/UI 실력', '인터뷰는 단순히 질문을 주고받는 자리가 아니라, 회사의 얼굴로서 브랜드 신뢰를 구축하고, 지원자의 역량과 태도를 정확히 파악해 팀에 맞는 인재를 선별하는 중요한 업무입니다. 실무자 입장에서는 지원자의 기술적 능력뿐만 아니라, 문제 해결 능력, 커뮤니케이션 스킬, 그리고 팀워크에 대한 이해도를 심층적으로 평가해야 합니다. 효과적인 인터뷰를 위해서는 첫째, 명확한 평가 기준을 수립하고, 둘째, 구조화된 질문을 통해 모든 지원자에게 공정한 기회를 제공해야 합니다. 셋째, 지원자의 답변을 경청하고 추가 질문을 통해 깊이 있는 이해를 도모해야 합니다. 넷째, 실제 업무와 유사한 상황을 제시하여 지원자의 실질적인 문제 해결 능력을 평가하는 것이 중요합니다. 마지막으로, 인터뷰는 상호 존중의 과정임을 잊지 않고, 지원자에게도 회사에 대한 궁금증을 해소할 기회를 충분히 제공해야 합니다. 이 글에서는 UX/UI 분야에서 성공적인 인터뷰를 진행하고, 이를 통해 팀의 실력을 향상시키는 데 기여할 수 있는 실질적인 팁들을 공유합니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/5b54fd9c-6304-46ef-893a-0e1595873658-main--3-.png', 1, 0, 0, '2025-07-23 04:29:04', '2025-07-23 04:29:06', 'FREE'),
(15, 1, '개발 실무에서 정말 중요한 조언들', '### ✅ 1. **코드는 나를 위한 것이 아니다**\n \n * 나중에 유지보수할 사람(대개는 나 자신 포함)이 이해할 수 있도록 작성하자.\n * 변수명, 함수명, 커밋 메시지 모두 **“명확하게”**.\n * “작동하는 코드”는 시작에 불과하다. “읽기 쉬운 코드”, “유지보수하기 쉬운 코드”를 목표로 해야 한다.\n\n### ✅ 2. **문서화는 선택이 아닌 필수**\n * 코드만으로는 모든 것을 설명할 수 없다. 왜 이렇게 설계했는지, 어떤 문제를 해결하려 했는지 등을 문서로 남기자.\n * API 명세, 아키텍처 다이어그램, 주요 기능 설명 등은 협업의 효율을 높인다.\n\n### ✅ 3. **테스트 코드 작성 습관화**\n * 버그를 줄이고 코드의 안정성을 높이는 가장 확실한 방법이다.\n * 리팩토링 시에도 안전하게 변경할 수 있는 기반이 된다.\n\n### ✅ 4. **코드 리뷰는 성장의 기회**\n * 내 코드를 개선하고, 동료의 코드를 통해 배우는 최고의 학습 방법이다.\n * 비판적으로 받아들이기보다, 더 나은 코드를 만들기 위한 과정으로 이해하자.\n\n### ✅ 5. **지속적인 학습과 공유**\n * 기술 트렌드는 빠르게 변한다. 새로운 기술을 익히고, 이를 팀원들과 공유하며 함께 성장하자.\n * 스터디, 세미나 참여, 블로그 작성 등 다양한 방법으로 학습하고 지식을 나눌 수 있다.\n\n### ✅ 6. **소통과 협업의 중요성**\n * 개발은 혼자 하는 것이 아니다. 팀원들과의 원활한 소통이 프로젝트 성공의 핵심이다.\n * 문제 발생 시 빠르게 공유하고, 함께 해결책을 모색하는 태도가 중요하다.' , 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/thumbnails/03b5836b-0471-4ea7-accf-21b6aa5f2402-2023100510295079908.jpg', 1, 0, 0, '2025-07-23 04:33:10', '2025-07-23 04:33:12', 'FREE');

-- 크리에이터 1: 김진아 (user_id = 1)
INSERT INTO notice (creator_id, content, image_url, created_at) VALUES
(1, '포트폴리오 관련 질문은 이 글에 남겨주세요!', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/notice/notice1.jpg', '2025-07-22 18:30:00');

-- 크리에이터 2: 김크리 (user_id = 2)
INSERT INTO notice (creator_id, content, image_url, created_at) VALUES
(2, '디자인 피드백 공지를 확인해주세요!', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/notice/notice2.jpg', '2025-07-22 18:40:00');

-- 크리에이터 3: 김개발 (user_id = 3)
INSERT INTO notice (creator_id, content, image_url, created_at) VALUES
(3, '실시간 인프라 설계 Q&A는 오후 9시에 진행됩니다.', 'https://creationstack-bucket.s3.ap-northeast-2.amazonaws.com/notice/notice3.jpg', '2025-07-22 18:50:00');

-- user_id 4 (김유저)가 각각 공지에 리액션을 남긴다고 가정

-- 🔥 이모지로 반응
INSERT INTO notice_reaction (notice_id, user_id, emoji) VALUES
(1, 4, '🔥'),
(2, 4, '🔥'),
(3, 4, '🔥');

-- ❤️ 이모지로 중복 반응 테스트
INSERT INTO notice_reaction (notice_id, user_id, emoji) VALUES
(1, 4, '❤️');

INSERT INTO notice (creator_id, content, created_at) VALUES
(2, 
'안녕하세요, 이번 공지는 디자인 피드백 및 전체 공지사항을 포함하고 있습니다. 아래 내용을 꼭 확인하신 후 피드백 게시판에 의견을 남겨주세요.
[공지 사항]
새로운 UI/UX 개선안이 적용되어 일부 레이아웃이 변경되었습니다.
기존에 사용하시던 기능은 그대로 유지되며, 일부 버튼의 위치만 변경되었습니다.
곧 다가오는 기능 릴리즈에는 댓글 고정 기능, 답변 정렬 기능이 포함될 예정입니다.
문의사항은 support@creationstack.com 으로 보내주시기 바랍니다.
감사합니다.', 
'2025-07-22 18:40:00');
ALTER TABLE notice MODIFY content TEXT NOT NULL;
commit;

